declare_args() {
  mds_config_file = ""
  mds_config_core = ""

  # base
  mds_tick_u64 = false
  mds_object_name_size = 7
  mds_clock_tick_freq_hz = 1000
  mds_core_backtrace_depth = 16

  # log
  mds_log_enable = true
  mds_log_build_level = "MDS_LOG_LEVEL_INF"
  mds_log_filter_enable = false
  mds_log_assert_enable = false

  # sys
  mds_kernel_log_level = "MDS_LOG_LEVEL_WRN"
  mds_kernel_smp_cpus = 1
  mds_kernel_thread_priority_max = 32
  mds_kernel_stats_enable = false

  mds_timer_skiplist_level = 1
  mds_timer_skiplist_shift = 2

  mds_timer_independent = true
  mds_timer_thread_priority = 0
  mds_timer_thread_stacksize = 256
  mds_timer_thread_ticks = 16

  mds_idle_thread_stacksize = 384
  mds_idle_thread_ticks = 16
  mds_idle_thread_hooks = 0
}

config("kernel_cfg") {
  include_dirs = [ "../../include" ]

  defines = []

  if (defined(mds_config_file) && mds_config_file != "") {
    defines += [ "CONFIG_MDS_CONFIG_FILE=\"${mds_config_file}\"" ]
  }

  if (mds_tick_u64) {
    defines += [ "CONFIG_MDS_TICK_U64=1" ]
  } else {
    defines += [ "CONFIG_MDS_TICK_U64=0" ]
  }

  defines += [ "CONFIG_MDS_OBJECT_NAME_SIZE=${mds_object_name_size}" ]
  defines += [ "CONFIG_MDS_CLOCK_TICK_FREQ_HZ=${mds_clock_tick_freq_hz}" ]
  defines += [ "CONFIG_MDS_CORE_BACKTRACE_DEPTH=${mds_core_backtrace_depth}" ]

  if (mds_log_enable) {
    defines += [ "CONFIG_MDS_LOG_ENABLE=1" ]
  } else {
    defines += [ "CONFIG_MDS_LOG_ENABLE=0" ]
  }

  if (mds_log_filter_enable) {
    defines += [ "CONFIG_MDS_LOG_FILTER_ENABLE=1" ]
  } else {
    defines += [ "CONFIG_MDS_LOG_FILTER_ENABLE=0" ]
  }

  if (mds_log_assert_enable) {
    defines += [ "CONFIG_MDS_LOG_ASSERT_ENABLE=1" ]
  } else {
    defines += [ "CONFIG_MDS_LOG_ASSERT_ENABLE=0" ]
  }

  assert(mds_log_build_level == "MDS_LOG_LEVEL_OFF" ||
         mds_log_build_level == "MDS_LOG_LEVEL_FAT" ||
         mds_log_build_level == "MDS_LOG_LEVEL_ERR" ||
         mds_log_build_level == "MDS_LOG_LEVEL_WRN" ||
         mds_log_build_level == "MDS_LOG_LEVEL_INF" ||
         mds_log_build_level == "MDS_LOG_LEVEL_DBG")
  defines += [ "CONFIG_MDS_LOG_BUILD_LEVEL=${mds_log_build_level}" ]

  assert(mds_kernel_log_level == "MDS_LOG_LEVEL_OFF" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_FAT" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_ERR" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_WRN" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_INF" ||
         mds_kernel_log_level == "MDS_LOG_LEVEL_DBG")
  defines += [ "CONFIG_MDS_LOG_KERNEL_LEVEL=${mds_kernel_log_level}" ]

  defines += [
    "CONFIG_MDS_KERNEL_SMP_CPUS=${mds_kernel_smp_cpus}",
    "CONFIG_MDS_KERNEL_THREAD_PRIORITY_MAX=${mds_kernel_thread_priority_max}",
  ]

  if (mds_kernel_stats_enable) {
    defines += [ "CONFIG_MDS_KERNEL_STATS_ENABLE=1" ]
  } else {
    defines += [ "CONFIG_MDS_KERNEL_STATS_ENABLE=0" ]
  }

  defines += [ "CONFIG_MDS_TIMER_SKIPLIST_LEVEL=${mds_timer_skiplist_level}" ]
  defines += [ "CONFIG_MDS_TIMER_SKIPLIST_SHIFT=${mds_timer_skiplist_shift}" ]
}

source_set("kernel_src") {
  defines = []
  if (mds_timer_independent) {
    defines += [ "CONFIG_MDS_TIMER_INDEPENDENT=1" ]
  } else {
    defines += [ "CONFIG_MDS_TIMER_INDEPENDENT=0" ]
  }

  defines += [
    "CONFIG_MDS_TIMER_THREAD_PRIORITY=${mds_timer_thread_priority}",
    "CONFIG_MDS_TIMER_THREAD_STACKSIZE=${mds_timer_thread_stacksize}",
    "CONFIG_MDS_TIMER_THREAD_TICKS=${mds_timer_thread_ticks}",
  ]

  defines += [
    "CONFIG_MDS_IDLE_THREAD_STACKSIZE=${mds_idle_thread_stacksize}",
    "CONFIG_MDS_IDLE_THREAD_TICKS=${mds_idle_thread_ticks}",
    "CONFIG_MDS_IDLE_THREAD_HOOKS=${mds_idle_thread_hooks}",
  ]

  sources = [
    "device.c",
    "log.c",
    "object.c",
  ]

  # core
  if (defined(mds_config_core) && mds_config_core != "") {
    sources += [ "core/" + mds_config_core + ".c" ]
  }

  # mem
  sources += [
    "mem/llff.c",
    "mem/memory.c",
  ]

  # sys
  if (mds_kernel_thread_priority_max > 0) {
    sources += [
      "sys/clock.c",
      "sys/critical.c",
      "sys/idle.c",
      "sys/kernel.c",
      "sys/scheduler.c",
      "sys/thread.c",
      "sys/timer.c",
      "sys/workq.c",
    ]

    sources += [
      "sys/ipc/condition.c",
      "sys/ipc/event.c",
      "sys/ipc/mempool.c",
      "sys/ipc/msgqueue.c",
      "sys/ipc/mutex.c",
      "sys/ipc/rwlock.c",
      "sys/ipc/semaphore.c",
    ]
  } else {
    sources += [ "src/nosys.c" ]
  }

  public_deps = [ "../library/:libary_src" ]
}
